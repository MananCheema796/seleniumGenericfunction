from webdriver_manager.chrome import ChromeDriverManager
from selenium import webdriver 
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from time import sleep
from selenium.webdriver.common.keys import Keys
import pickle
import pandas as pd
from selenium.webdriver.common.proxy import Proxy, ProxyType
import json
import threading
from dotenv import load_dotenv
import os

options=webdriver.ChromeOptions()
options.add_experimental_option("detach", True)

driver = webdriver.Chrome(options=options, service=ChromeService(ChromeDriverManager().install()))



def linkedin_login(url, select_1st_field, select_2nd_field, button):
    
    driver.get(url)

    sleep(3)
    phone_or_email = input("Enter your phone or Email here :") 
    password = input("Enter your password here :")

    Email_or_Phone = driver.find_element(By.XPATH, select_1st_field)
    Password = driver.find_element(By.XPATH, select_2nd_field)

    Email_or_Phone.send_keys(phone_or_email)
    Password.send_keys(password)

    button=driver.find_element(By.XPATH, button)
    button.click()

    sleep(5)

    #code for cookies save
        
    cookies = driver.get_cookies()
    with open("linkedin_cookies.json", "w") as f:
        json.dump(cookies, f)

platform_credentials = {
    "https://www.linkedin.com/login":("//input[contains(@aria-label, 'Email')] | //input[contains(@aria-label, 'Phone')]", "//input[@type = 'password']", "//button[@type='submit']")
}

for url, paths in platform_credentials.items():
    linkedin_login(url, *paths)


#code for cookies load

from selenium import webdriver
import pickle
import time
import json

driver =webdriver.Chrome()
driver.get("https://www.linkedin.com/")

with open('cookies.pk1', 'rb') as cookies_file:
    cookies = pickle.load(cookies_file)

driver.get("https://www.linkedin.com/feed/")
time.sleep(5)

for cookie in cookies:
    driver.add_cookie(cookie)
time.sleep(5)

driver.refresh